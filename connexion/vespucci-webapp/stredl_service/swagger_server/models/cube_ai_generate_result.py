# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CubeAIGenerateResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, network_report: object=None, network_c_graph: object=None, network_c: str=None, network_h: str=None, data_c: str=None, data_h: str=None, data_bin: str=None, full_binary: str=None):  # noqa: E501
        """CubeAIGenerateResult - a model defined in Swagger

        :param network_report: The network_report of this CubeAIGenerateResult.  # noqa: E501
        :type network_report: object
        :param network_c_graph: The network_c_graph of this CubeAIGenerateResult.  # noqa: E501
        :type network_c_graph: object
        :param network_c: The network_c of this CubeAIGenerateResult.  # noqa: E501
        :type network_c: str
        :param network_h: The network_h of this CubeAIGenerateResult.  # noqa: E501
        :type network_h: str
        :param data_c: The data_c of this CubeAIGenerateResult.  # noqa: E501
        :type data_c: str
        :param data_h: The data_h of this CubeAIGenerateResult.  # noqa: E501
        :type data_h: str
        :param data_bin: The data_bin of this CubeAIGenerateResult.  # noqa: E501
        :type data_bin: str
        :param full_binary: The full_binary of this CubeAIGenerateResult.  # noqa: E501
        :type full_binary: str
        """
        self.swagger_types = {
            'network_report': object,
            'network_c_graph': object,
            'network_c': str,
            'network_h': str,
            'data_c': str,
            'data_h': str,
            'data_bin': str,
            'full_binary': str
        }

        self.attribute_map = {
            'network_report': 'network_report',
            'network_c_graph': 'network_c_graph',
            'network_c': 'network_c',
            'network_h': 'network_h',
            'data_c': 'data_c',
            'data_h': 'data_h',
            'data_bin': 'data_bin',
            'full_binary': 'full_binary'
        }
        self._network_report = network_report
        self._network_c_graph = network_c_graph
        self._network_c = network_c
        self._network_h = network_h
        self._data_c = data_c
        self._data_h = data_h
        self._data_bin = data_bin
        self._full_binary = full_binary

    @classmethod
    def from_dict(cls, dikt) -> 'CubeAIGenerateResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CubeAIGenerateResult of this CubeAIGenerateResult.  # noqa: E501
        :rtype: CubeAIGenerateResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network_report(self) -> object:
        """Gets the network_report of this CubeAIGenerateResult.


        :return: The network_report of this CubeAIGenerateResult.
        :rtype: object
        """
        return self._network_report

    @network_report.setter
    def network_report(self, network_report: object):
        """Sets the network_report of this CubeAIGenerateResult.


        :param network_report: The network_report of this CubeAIGenerateResult.
        :type network_report: object
        """
        if network_report is None:
            raise ValueError("Invalid value for `network_report`, must not be `None`")  # noqa: E501

        self._network_report = network_report

    @property
    def network_c_graph(self) -> object:
        """Gets the network_c_graph of this CubeAIGenerateResult.


        :return: The network_c_graph of this CubeAIGenerateResult.
        :rtype: object
        """
        return self._network_c_graph

    @network_c_graph.setter
    def network_c_graph(self, network_c_graph: object):
        """Sets the network_c_graph of this CubeAIGenerateResult.


        :param network_c_graph: The network_c_graph of this CubeAIGenerateResult.
        :type network_c_graph: object
        """
        if network_c_graph is None:
            raise ValueError("Invalid value for `network_c_graph`, must not be `None`")  # noqa: E501

        self._network_c_graph = network_c_graph

    @property
    def network_c(self) -> str:
        """Gets the network_c of this CubeAIGenerateResult.


        :return: The network_c of this CubeAIGenerateResult.
        :rtype: str
        """
        return self._network_c

    @network_c.setter
    def network_c(self, network_c: str):
        """Sets the network_c of this CubeAIGenerateResult.


        :param network_c: The network_c of this CubeAIGenerateResult.
        :type network_c: str
        """

        self._network_c = network_c

    @property
    def network_h(self) -> str:
        """Gets the network_h of this CubeAIGenerateResult.


        :return: The network_h of this CubeAIGenerateResult.
        :rtype: str
        """
        return self._network_h

    @network_h.setter
    def network_h(self, network_h: str):
        """Sets the network_h of this CubeAIGenerateResult.


        :param network_h: The network_h of this CubeAIGenerateResult.
        :type network_h: str
        """

        self._network_h = network_h

    @property
    def data_c(self) -> str:
        """Gets the data_c of this CubeAIGenerateResult.


        :return: The data_c of this CubeAIGenerateResult.
        :rtype: str
        """
        return self._data_c

    @data_c.setter
    def data_c(self, data_c: str):
        """Sets the data_c of this CubeAIGenerateResult.


        :param data_c: The data_c of this CubeAIGenerateResult.
        :type data_c: str
        """

        self._data_c = data_c

    @property
    def data_h(self) -> str:
        """Gets the data_h of this CubeAIGenerateResult.


        :return: The data_h of this CubeAIGenerateResult.
        :rtype: str
        """
        return self._data_h

    @data_h.setter
    def data_h(self, data_h: str):
        """Sets the data_h of this CubeAIGenerateResult.


        :param data_h: The data_h of this CubeAIGenerateResult.
        :type data_h: str
        """

        self._data_h = data_h

    @property
    def data_bin(self) -> str:
        """Gets the data_bin of this CubeAIGenerateResult.


        :return: The data_bin of this CubeAIGenerateResult.
        :rtype: str
        """
        return self._data_bin

    @data_bin.setter
    def data_bin(self, data_bin: str):
        """Sets the data_bin of this CubeAIGenerateResult.


        :param data_bin: The data_bin of this CubeAIGenerateResult.
        :type data_bin: str
        """

        self._data_bin = data_bin

    @property
    def full_binary(self) -> str:
        """Gets the full_binary of this CubeAIGenerateResult.


        :return: The full_binary of this CubeAIGenerateResult.
        :rtype: str
        """
        return self._full_binary

    @full_binary.setter
    def full_binary(self, full_binary: str):
        """Sets the full_binary of this CubeAIGenerateResult.


        :param full_binary: The full_binary of this CubeAIGenerateResult.
        :type full_binary: str
        """

        self._full_binary = full_binary
