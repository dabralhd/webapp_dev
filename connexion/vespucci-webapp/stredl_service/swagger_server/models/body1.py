# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Body1(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, deep_learning_model: str=None, quantize: str=None, valinput: str=None, valoutput: str=None):  # noqa: E501
        """Body1 - a model defined in Swagger

        :param deep_learning_model: The deep_learning_model of this Body1.  # noqa: E501
        :type deep_learning_model: str
        :param quantize: The quantize of this Body1.  # noqa: E501
        :type quantize: str
        :param valinput: The valinput of this Body1.  # noqa: E501
        :type valinput: str
        :param valoutput: The valoutput of this Body1.  # noqa: E501
        :type valoutput: str
        """
        self.swagger_types = {
            'deep_learning_model': str,
            'quantize': str,
            'valinput': str,
            'valoutput': str
        }

        self.attribute_map = {
            'deep_learning_model': 'deep_learning_model',
            'quantize': 'quantize',
            'valinput': 'valinput',
            'valoutput': 'valoutput'
        }
        self._deep_learning_model = deep_learning_model
        self._quantize = quantize
        self._valinput = valinput
        self._valoutput = valoutput

    @classmethod
    def from_dict(cls, dikt) -> 'Body1':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The body_1 of this Body1.  # noqa: E501
        :rtype: Body1
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deep_learning_model(self) -> str:
        """Gets the deep_learning_model of this Body1.

        The model to analyze.  # noqa: E501

        :return: The deep_learning_model of this Body1.
        :rtype: str
        """
        return self._deep_learning_model

    @deep_learning_model.setter
    def deep_learning_model(self, deep_learning_model: str):
        """Sets the deep_learning_model of this Body1.

        The model to analyze.  # noqa: E501

        :param deep_learning_model: The deep_learning_model of this Body1.
        :type deep_learning_model: str
        """
        if deep_learning_model is None:
            raise ValueError("Invalid value for `deep_learning_model`, must not be `None`")  # noqa: E501

        self._deep_learning_model = deep_learning_model

    @property
    def quantize(self) -> str:
        """Gets the quantize of this Body1.

        Specify the tensor format configuration file for a Keras model or for the configuration file to perform the Keras post-training quantization process.  # noqa: E501

        :return: The quantize of this Body1.
        :rtype: str
        """
        return self._quantize

    @quantize.setter
    def quantize(self, quantize: str):
        """Sets the quantize of this Body1.

        Specify the tensor format configuration file for a Keras model or for the configuration file to perform the Keras post-training quantization process.  # noqa: E501

        :param quantize: The quantize of this Body1.
        :type quantize: str
        """

        self._quantize = quantize

    @property
    def valinput(self) -> str:
        """Gets the valinput of this Body1.

        indicates the custom test data set which must be used. If not defined an internal self-generated random dataset is used.  # noqa: E501

        :return: The valinput of this Body1.
        :rtype: str
        """
        return self._valinput

    @valinput.setter
    def valinput(self, valinput: str):
        """Sets the valinput of this Body1.

        indicates the custom test data set which must be used. If not defined an internal self-generated random dataset is used.  # noqa: E501

        :param valinput: The valinput of this Body1.
        :type valinput: str
        """

        self._valinput = valinput

    @property
    def valoutput(self) -> str:
        """Gets the valoutput of this Body1.

        indicates the expected custom output values. If the data are already provided in a simple file (*.npz) through the valinput parameter, this parameter is skipped.  # noqa: E501

        :return: The valoutput of this Body1.
        :rtype: str
        """
        return self._valoutput

    @valoutput.setter
    def valoutput(self, valoutput: str):
        """Sets the valoutput of this Body1.

        indicates the expected custom output values. If the data are already provided in a simple file (*.npz) through the valinput parameter, this parameter is skipped.  # noqa: E501

        :param valoutput: The valoutput of this Body1.
        :type valoutput: str
        """

        self._valoutput = valoutput
