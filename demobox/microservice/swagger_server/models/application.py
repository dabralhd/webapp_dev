# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.app_dnn import AppDNN  # noqa: F401,E501
from swagger_server.models.app_output import AppOutput  # noqa: F401,E501
from swagger_server.models.app_stats import AppStats  # noqa: F401,E501
from swagger_server.models.app_target import AppTarget  # noqa: F401,E501
from swagger_server.models.app_type import AppType  # noqa: F401,E501
from swagger_server import util


class Application(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, app_uuid: str=None, app_type: AppType=None, app_input: AppType=None, app_output: AppOutput=None, app_stats: AppStats=None, app_targets: AppTarget=None, app_dnn: AppDNN=None):  # noqa: E501
        """Application - a model defined in Swagger

        :param app_uuid: The app_uuid of this Application.  # noqa: E501
        :type app_uuid: str
        :param app_type: The app_type of this Application.  # noqa: E501
        :type app_type: AppType
        :param app_input: The app_input of this Application.  # noqa: E501
        :type app_input: AppType
        :param app_output: The app_output of this Application.  # noqa: E501
        :type app_output: AppOutput
        :param app_stats: The app_stats of this Application.  # noqa: E501
        :type app_stats: AppStats
        :param app_targets: The app_targets of this Application.  # noqa: E501
        :type app_targets: AppTarget
        :param app_dnn: The app_dnn of this Application.  # noqa: E501
        :type app_dnn: AppDNN
        """
        self.swagger_types = {
            'app_uuid': str,
            'app_type': AppType,
            'app_input': AppType,
            'app_output': AppOutput,
            'app_stats': AppStats,
            'app_targets': AppTarget,
            'app_dnn': AppDNN
        }

        self.attribute_map = {
            'app_uuid': 'app_uuid',
            'app_type': 'app_type',
            'app_input': 'app_input',
            'app_output': 'app_output',
            'app_stats': 'app_stats',
            'app_targets': 'app_targets',
            'app_dnn': 'app_dnn'
        }
        self._app_uuid = app_uuid
        self._app_type = app_type
        self._app_input = app_input
        self._app_output = app_output
        self._app_stats = app_stats
        self._app_targets = app_targets
        self._app_dnn = app_dnn

    @classmethod
    def from_dict(cls, dikt) -> 'Application':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Application of this Application.  # noqa: E501
        :rtype: Application
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_uuid(self) -> str:
        """Gets the app_uuid of this Application.


        :return: The app_uuid of this Application.
        :rtype: str
        """
        return self._app_uuid

    @app_uuid.setter
    def app_uuid(self, app_uuid: str):
        """Sets the app_uuid of this Application.


        :param app_uuid: The app_uuid of this Application.
        :type app_uuid: str
        """
        if app_uuid is None:
            raise ValueError("Invalid value for `app_uuid`, must not be `None`")  # noqa: E501

        self._app_uuid = app_uuid

    @property
    def app_type(self) -> AppType:
        """Gets the app_type of this Application.


        :return: The app_type of this Application.
        :rtype: AppType
        """
        return self._app_type

    @app_type.setter
    def app_type(self, app_type: AppType):
        """Sets the app_type of this Application.


        :param app_type: The app_type of this Application.
        :type app_type: AppType
        """

        self._app_type = app_type

    @property
    def app_input(self) -> AppType:
        """Gets the app_input of this Application.


        :return: The app_input of this Application.
        :rtype: AppType
        """
        return self._app_input

    @app_input.setter
    def app_input(self, app_input: AppType):
        """Sets the app_input of this Application.


        :param app_input: The app_input of this Application.
        :type app_input: AppType
        """

        self._app_input = app_input

    @property
    def app_output(self) -> AppOutput:
        """Gets the app_output of this Application.


        :return: The app_output of this Application.
        :rtype: AppOutput
        """
        return self._app_output

    @app_output.setter
    def app_output(self, app_output: AppOutput):
        """Sets the app_output of this Application.


        :param app_output: The app_output of this Application.
        :type app_output: AppOutput
        """

        self._app_output = app_output

    @property
    def app_stats(self) -> AppStats:
        """Gets the app_stats of this Application.


        :return: The app_stats of this Application.
        :rtype: AppStats
        """
        return self._app_stats

    @app_stats.setter
    def app_stats(self, app_stats: AppStats):
        """Sets the app_stats of this Application.


        :param app_stats: The app_stats of this Application.
        :type app_stats: AppStats
        """
        if app_stats is None:
            raise ValueError("Invalid value for `app_stats`, must not be `None`")  # noqa: E501

        self._app_stats = app_stats

    @property
    def app_targets(self) -> AppTarget:
        """Gets the app_targets of this Application.


        :return: The app_targets of this Application.
        :rtype: AppTarget
        """
        return self._app_targets

    @app_targets.setter
    def app_targets(self, app_targets: AppTarget):
        """Sets the app_targets of this Application.


        :param app_targets: The app_targets of this Application.
        :type app_targets: AppTarget
        """

        self._app_targets = app_targets

    @property
    def app_dnn(self) -> AppDNN:
        """Gets the app_dnn of this Application.


        :return: The app_dnn of this Application.
        :rtype: AppDNN
        """
        return self._app_dnn

    @app_dnn.setter
    def app_dnn(self, app_dnn: AppDNN):
        """Sets the app_dnn of this Application.


        :param app_dnn: The app_dnn of this Application.
        :type app_dnn: AppDNN
        """

        self._app_dnn = app_dnn
